Java GC收集器配置说明
　　根据Java GC收集器具体分类，我们可以看出JVM根据需求不同提供了三种选择：串行收集器、并行收集器、并发收集器。

　　串行收集器只适用于小数据量的情况，我们主要了解一下并行收集器和并发收集器。默认情况下，JDK5.0以前都是使用串行收集器，如果需要使用其他收集器需要在启动的是时候加入相应的参数。JDK5.0以后，JVM会根据当前系统的配置进行判断。

　　我们先了解一下什么是并行和并发？

　　并行：指多条垃圾收集器线程并行工作，但此时仍是“Stop The World”状态，即用户线程处于等待状态；

　　并发：指用户线程和垃圾收集线程同时执行（不一定是并行的，很有可能是线程交替运行），用户线程继续运行，而垃圾收集程序运行在另一个CPU上。

　  吞吐量优先的并行收集器

　　　　并行收集器主要以达到一定的吞吐量为目标，适用于科学技术和后台处理。分为两种：　　

　　　　　1、并行收集器（-XX:+ UseParallelGC）在次要回收中使用多线程来执行，在主要回收中使用单线程执行；

　　　　　2、并行旧生代收集器（Parallet Old Collection）(XX:+UseParallelOldGC),在次要回收和主要回收都使用多线程，当年老区填满后会触发主要回收

　　　　　　典型配置：

　　　　　　java -Xmx3800m -Xms3800m -Xmn2g -Xss128k -XX:UseParallelGC -XX:ParallelGCThreans = 20

　　　　　　-Xmx3800m:最大堆大小

　　　　　　-Xms3800m:初始堆大小,此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。

　　　　　　-Xmn2g: 设置年轻代大小为2G。整个JVM内存大小=年轻代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。

　　　　　　-Xss128k:设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K。更具应用的线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，

　　　　　　不能无限生成，经验值在3000~5000左右。

　　　　　　-XX:+UseParallelGC:选择垃圾收集器为并行收集器。此配置仅对年轻代有效。即该配置下，年轻代使用并发收集，而年老代仍旧使用串行收集。

　　　　　　-XX:ParallelGCThreans = 20：配置并行收集器的线程数，即：同时多少个线程一起进行垃圾回收。此值的配置最好与处理器数目相等。

　　　　　　------------------------------------------------------------------------------------------------------------------------------------------------

　　　　　　java -Xmx3500m -Xms3500m -Xmn2g -Xss128k -XX:+UseparallelGC - XX:ParallelGCThreans = 20 -XX:+UseParallelOldGC

　　　　　　-XX:+UseParallelOldGC:配置老年代垃圾收集器为并行收集。JDK6.0支持对老年代并行收集。

　　　　　　------------------------------------------------------------------------------------------------------------------------------------------------

　　　　　　java -Xms3550m -Xmm3550m -Xmn2g -Xss128k -XX:+UseparallelGC -XX:MaxGCPauseMillis = 100

　　　　　　-XX:MaxGCPauseMillis = 100:设置每次年轻代垃圾回收的最长时间，如果无法满足此时间，JVM会自动调整年轻代大小，以满足此值。

　　　　　　------------------------------------------------------------------------------------------------------------------------------------------------

　　　　　　java -Xms3550m -Xmm3550m -Xmn2g -Xss128k -XX:+UseparallelGC -XX:MaxGCPauseMillis = 100 -XX:+UseAdaptiveSizePolicy

　　　　　　-XX:UseAdaptiveSizePolicy = 100:设置此项以后，并行收集器会自动选择年轻代大小和相应的Surivior区比例，以达到目标系统规定的最低响应时间或者收集频率等，此值建议使用并行收集器时一直打开。

　　相应时间优先并发收集器　　

　　　　　　并发收集器主要保证系统的响应时间，减少垃圾收集的停顿时间。适用于应用服务器、电信领域。

　　　　　　CMS（Concurrent Mark Sweep）并发标记清理收集器

　　　　　　CMS（-XX:+UseConcMarkSweepGC）收集器在老年代使用，专门收集那些在主要回收中不可能到达的年老对象。它与应用程序并发执行，在年老代保持一直有足够的空间以保证不会发生年轻代晋升失败。

　　　　　　典型配置：

　　　　　　java -Xmx3550m -Xmm3550m -Xmn2g -Xss128K -XX:ParallelGCThread = 20 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC

　　　　　　-XX:+UseConcMarkSweepGC：设置年老代为并发收集。

　　　　　　-XX:+UseParNewGC：设置年轻代为并行收集。可以和CMS收集同时使用。JDK5.0以上，JVM会根据系统配置自行配置，所以无需再配置此值。

　　　　　　------------------------------------------------------------------------------------------------------------------------------------------------

　　　　　　java -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseConcMarkSweepGC -XX:CMSFULLGCsBeforCompaction=5 -XX:+UseCMSCompactAtFullCollection

　　　　　　-XX:CMSFULLGCsBeforCompaction=5:由于并发收集器不对内粗空间进行压缩、整理，所以运行一段时间会产生“碎片”，使得运行效率低。此值设置运行多少次GC以后对内训空间进行压缩、整理。

　　　　　　-XX:+UseCMSCompactAtFullCollection：打开对年老代的压缩。可能会影响性能，但是可以消除碎片。

　　常见配置汇总

　　　　-XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况

　　　　-XX:ParallelGCThreads=n:设置并发收集器年轻代收集方式为并行收集时，使用的CPU数。并行收集线程数

　　　　-XX:ParallelGCThreads=n:设置并行收集器收集时使用的CPU数。并行收集线程数

　　　　-XX:MaxGCPauseMillis=n:设置并行收集最大暂停时间

　　　　-XX:GCTimeRatio=n:设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)

　　　　-XX:+PrintGC

　　　　-XX:+PrintGCDetails

　　　　-XX:+PrintGCTimeStamps

　　　　-Xloggc:filename

　　　　-XX:+UseSerialGC:设置串行收集器

　　　　-XX:+UseParallelGC:设置并行收集器

　　　　-XX:+UseParalledlOldGC:设置并行年老代收集器

　　　　-XX:+UseConcMarkSweepGC:设置并发收集器

　　　　-Xms:初始堆大小

　　　　-Xmx:最大堆大小

　　　　-XX:NewSize=n:设置年轻代大小

　　　　-XX:NewRatio=n:设置年轻代和年老代的比值。如:为3，表示年轻代与年老代比值为1：3，年轻代占整个年轻代年老代和的1/4

　　　　-XX:SurvivorRatio=n:年轻代中Eden区与两个Survivor区的比值。注意Survivor区有两个。如：3，表示Eden：Survivor=3：2，一个Survivor区占整个年轻代的1/5

　　　　-XX:MaxPermSize=n:设置持久代大小

　　　　堆设置

　　　　收集器设置

　　　　垃圾回收统计信息

　　　　并行收集器设置

　　　　并发收集器设置

　　调优总结

　　　　-XX:+UseCMSCompactAtFullCollection：使用并发收集器时，开启对年老代的压缩

　　　　-XX:CMSFullGCsBeforeCompaction=0：上面配置开启的情况下，这里设置多少次Full GC后，对年老代进行压缩

　　　　-XX:MaxHeapFreeRatio=30

　　　　响应时间优先的应用：年老代使用并发收集器，所以其大小需要小心设置，一般要考虑并发会话率和会话持续时间等一些参数。如果堆设置小了，可以会造成内存碎片、高回收频率以及应用暂停而使用传统的标记清除方式；如果堆大了，则需要较长的收集时

　　间。最优化的方案，一般需要参考以下数据获得：减少年轻代和年老代花费的时间，一般会提高应用的效率

　　　　吞吐量优先的应用：一般吞吐量优先的应用都有一个很大的年轻代和一个较小的年老代。原因是，这样可以尽可能回收掉大部分短期对象，减少中期的对象，而年老代尽存放长期存活对象。

　　　　并发垃圾收集信息

　　　　持久代并发收集次数

　　　　传统GC信息

　　　　花在年轻代和年老代回收上的时间比例

　　　　响应时间优先的应用：尽可能设大，直到接近系统的最低响应时间限制（根据实际情况选择）。在此种情况下，年轻代收集发生的频率也是最小的。同时，减少到达年老代的对象。

　　　　吞吐量优先的应用：尽可能的设置大，可能到达Gbit的程度。因为对响应时间没有要求，垃圾收集可以并行进行，一般适合8CPU以上的应用。

　　　　年轻代大小选择

　　　　年老代大小选择

　　　　较小堆引起的碎片问题

　　　　　　因为年老代的并发收集器使用标记、清除算法，所以不会对堆进行压缩。当收集器回收时，他会把相邻的空间进行合并，这样可以分配给较大的对象。但是，当堆空间较小时，运行一段时间以后，就会出现“碎片”，如果并发收集器找不到足够的空间，那么并发收集器将会停止，然后使用传统的标记、清除方式进行回收。如果出现“碎片”，可能需要进行如下配置：

　　　　-XX:+UseCMSCompactAtFullCollection：使用并发收集器时，开启对年老代的压缩

　　　　-XX:CMSFullGCsBeforeCompaction=0：上面配置开启的情况下，这里设置多少次Full GC后，对年老代进行压缩

　　　　-XX:MaxHeapFreeRatio=30